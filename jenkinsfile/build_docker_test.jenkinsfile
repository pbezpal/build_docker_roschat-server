#!groovy

def resultBuild = true
def VERSION
def VERSION_OLD
STATUS="Успешно"
properties([disableConcurrentBuilds()])

pipeline{
  agent{
    label 'docker_centos'
  }
  stages{
    stage("Очистка сборочной директории"){
      steps{
        deleteDir();
      }
    }
    stage("Клонирование GIT"){
      steps{
        echo "========== Cloning GIT =========="
        script{
          try{
            git 'ssh://bezpalko_p@10.10.199.35/opt/git/firelink/roschat-server_docker'
          }catch(err){
            currentBuild.result = "FAILURE"
            error("Невозможно выполниь клонированние из репозитория git")
          }
        }
      }
    }
	stage("Остановка старого контейнера"){
      steps{
        script{
          try{
            echo "========== Stop and remove old docker container =========="
            sh "docker-compose stop && docker-compose rm -f"
          }catch(err){
            currentBuild.result = "FAILURE"
            error("Не удалось остановить старый контейнер")
          }
        }
      }
    }
    stage("Сборка образа и запуск контейнера"){
      steps{
        script{
          VERSION=readFile('/tmp/build').trim()
		  VERSION_OLD=readFile('/tmp/build.old').trim()
          VERSION="${VERSION}_${BUILD_NUMBER}"
          try{
            echo "========== TAG for new docker =========="
            sh "echo TAG=${VERSION} > ${WORKSPACE}/.env"
            echo "========== Copy license =========="
            sh "test ! -d ${WORKSPACE}/license && cp -r /opt/license ${WORKSPACE}"
            echo "========== Copy rpms =========="
            sh "test ! -d ${WORKSPACE}/rpms && cp -r /tmp/rpms ${WORKSPACE}"
            echo "========== Build docker image =========="
            sh "docker-compose up -d"
          }catch(err){
            currentBuild.result = "FAILURE"
            error("Ошибка сборки/запуска образа сервера")
          }
        }
      }
    }
	stage("Установка ПО на сервер"){
      steps{
        script{
          try{
            echo "========== Install soft on docker container =========="
            sh "docker container exec -it -u 0 ${VERSION} bash"
			sh "yum -y install cryptopp turnserver sudo cyrus-sasl-plain nodejs mutt mc net-tools openssh-server openssh-clients"
			sh "test ! -d /opt/rmps && mkdir /opt/rpms"
			sh "mv /tmp/*.rpm /opt/rpms/"
			sh "yum -y install /opt/rpms/*.rpm"
			sh "exit"
			sh "docker container exec ${VERSION} /opt/start_ansible_playbook.sh"
          }catch(err){
            resultBuild=false
          }
        }
      }
    }
  }
}
