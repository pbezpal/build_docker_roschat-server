#!groovy

properties([disableConcurrentBuilds()])

def is_critical_result_shell_build(command,text){
    if(currentBuild.result == 'SUCCESS'){
        try{
            sh command
        }catch(err){
            currentBuild.result = 'FAILURE'
            emailext body: "Server version - roschat-server:${VERSION} \n Result build - ${currentBuild.result}", subject: 'Build Roschat server', to: 'bezpalko', from: 'jenkins@ros.chat'
			error(text)
			return;
        }
    }
}

def is_result_shell_build(command,text){
    if(currentBuild.result == 'SUCCESS'){
        try{
            sh command
        }catch(err){
            echo text
            currentBuild.result = 'FAILURE'
        }
    }
}

def is_result_shell_after_build(command,text){
	if(currentBuild.result == 'SUCCESS'){
    	try{
    	  sh command
    	}catch(err){
    	    echo text
    	}
	}
}

pipeline{
  agent{
    label 'server_update'
  }
  stages{
    stage("Cleaning the assembly directory"){
      steps{
        deleteDir();
      }
    }
    stage("Cloning from a git repository"){
      steps{
        echo "========== Cloning GIT =========="
        script{
          try{
            git 'ssh://bezpalko_p@10.10.199.35/opt/git/firelink/roschat-server_docker'
          }catch(err){
            currentBuild.result = "FAILURE"
            error("Error copying from git repository")
			return;
          }
		  currentBuild.result = "SUCCESS"
        }
      }
    }
    stage("Update rpm"){
      steps{
        script{
          echo "========== Update rpm package =========="
          is_critical_result_shell_build("yum localinstall -y /tmp/rpm_temp/*.rpm","Can't update rpm")
          is_critical_result_shell_build("systemctl restart wlan","Can't restart wlan")
        }
      }
    }
    stage('Sending report to email'){
        steps{
            script{
                emailext body: "Server for client \n Result update - ${currentBuild.result}", subject: 'Update Roschat server', to: 'bezpalko', from: 'jenkins@ros.chat'
            }
        }
    }
    stage("Run job build server"){
          steps{
            script{
              if(currentBuild.result == 'SUCCESS'){
                  build job: 'roschat-server_docker', wait: false
            }
        }
      }
    }
  }
}
