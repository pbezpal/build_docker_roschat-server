#!groovy

String VERSION="latest"
String IMAGE_NAME="10.10.199.217:8123/roschat-server:latest"
properties([disableConcurrentBuilds()])

def is_critical_result_shell_build(command,text){
    if(currentBuild.result == 'SUCCESS'){
        try{
            sh command
        }catch(err){
            currentBuild.result = 'FAILURE'
            emailext body: "Server version - roschat-server:${VERSION} \n Result build - ${currentBuild.result}", subject: 'Build Roschat server', to: 'bezpalko', from: 'jenkins@ros.chat'
			error(text)
			return;
        }
    }
}

def is_result_shell_build(command,text){
    if(currentBuild.result == 'SUCCESS'){
        try{
            sh command
        }catch(err){
            echo text
            currentBuild.result = 'FAILURE'
        }
    }
}

def is_result_shell_after_build(command,text){
	if(currentBuild.result == 'SUCCESS'){
    	try{
    	  sh command
    	}catch(err){
    	    echo text
    	}
	}
}

pipeline{
  agent{
    label 'server_update'
  }
  stages{
    stage("Cleaning the assembly directory"){
      steps{
        deleteDir();
      }
    }
    stage("Cloning from a git repository"){
      steps{
        echo "========== Cloning GIT =========="
        script{
          try{
            git 'ssh://bezpalko_p@10.10.199.35/opt/git/firelink/roschat-server_docker'
          }catch(err){
            currentBuild.result = "FAILURE"
            error("Error copying from git repository")
			return;
          }
		  currentBuild.result = "SUCCESS"
        }
      }
    }
    stage("Stopping old container"){
      steps{
        script{
          echo "========== Stop and remove old docker container =========="
          is_critical_result_shell_build("docker-compose stop && docker-compose rm -f","Can't stop old docker container")
        }
      }
    }
    stage("Update image"){
      steps{
        script{
          echo "========== Update image roschat-server:latest =========="
          is_critical_result_shell_build("if [[ `docker images -q ${IMAGE_NAME}` != \"\" ]]; then docker rmi ${IMAGE_NAME}; fi","Can't remove old image")
        }
      }
    }
    stage("Run docker container and start services"){
      steps{
        script{
      echo "========== Image name for new docker =========="
      is_critical_result_shell_build("echo IMAGE=${IMAGE_NAME} > ${WORKSPACE}/.env","Can't write the image name to a ${WORKSPACE}/.env")
      echo "========== TAG for new docker =========="
			is_critical_result_shell_build("echo TAG=${VERSION} >> ${WORKSPACE}/.env","Can't write the tag to a ${WORKSPACE}/.env")
      echo "========== Login docker registry =========="
      is_critical_result_shell_build("docker login -u admin -p Y@rd87846259 10.10.199.217:8123","Can't login docker registry")
      echo "========== Pull latest image =========="
      is_critical_result_shell_build("docker pull ${IMAGE_NAME}","Can't pull latest image of server")
      echo "========== Start conteiner =========="
			is_critical_result_shell_build("docker-compose up -d --no-build","Can't launch of the container")
      echo "========== Start services =========="
			is_critical_result_shell_build("docker-compose exec -T -u 0 roschat-server /opt/start_services.sh","Can't running services")
        }
      }
    }
    stage('Sending report to email'){
        steps{
            script{
                emailext body: "Server for client \n Result update - ${currentBuild.result}", subject: 'Update Roschat server', to: 'bezpalko', from: 'jenkins@ros.chat'
            }
        }
    }
	/*stage('Start testing'){
	  steps{
	    script{
		  if(currentBuild.result == "SUCCESS"){
			try{
              if("${VERSION}".contains('roschat-sip')){}
			  else if("${VERSION}".contains('roschat-db')){
                  build(job: "roschat-db-testing", parameters: [string(name: 'VER', value: "${VERSION}")])
              }else if("${VERSION}".contains('roschat-snmp')){
                  build(job: "roschat-snmp-testing", parameters: [string(name: 'VER', value: "${VERSION}")])
              }else if("${VERSION}".contains('roschat-server')){
                  build(job: "roschat-server-testing", parameters: [string(name: 'VER', value: "${VERSION}")])
              }else if("${VERSION}".contains('roschat-web-client')){
                  build(job: "roschat-web-client-testing", parameters: [string(name: 'VER', value: "${VERSION}")])
              }else{
                  build(job: "roschat-ms-testing", parameters: [string(name: 'VER', value: "${VERSION}")])
              }
			}catch(err){
			  echo "roschat-server:${VERSION} testing - FAILED"
			}
		  }
		}
	  }
	}*/
  }
  /*post{
    always{
      script{
        if(currentBuild.result != "SUCCESS"){
	      Boolean DOCKER = sh(
			script: "docker ps -a | grep ${VERSION}",
			returnStatus: true) == 0
		  if(DOCKER){
			sh "docker-compose down && docker rmi roschat-server:${VERSION}"
		  }

		  echo "========== Start old container =========="
		  try{
			sh "docker ps | grep latest"
		  }catch(err){
			sh "echo TAG=latest > ${workspace}/.env"
			sh "docker-compose up -d && docker-compose exec -T -u 0 roschat-server /opt/start_services.sh"
		  }
        }
      }
    }
  }*/
}
