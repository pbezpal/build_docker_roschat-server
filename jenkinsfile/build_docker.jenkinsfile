#!groovy

def resultBuild = true
def VERSION
def OTHER_VERSION
STATUS="Успешно"
properties([disableConcurrentBuilds()])

pipeline{
  agent{
    label 'docker_centos'
  }
  stages{
    stage("Очистка сборочной директории"){
      steps{
        deleteDir();
      }
    }
    stage("Клонирование GIT"){
      steps{
        echo "========== Cloning GIT =========="
        script{
          try{
            git 'ssh://bezpalko_p@10.10.199.35/opt/git/firelink/roschat-server_docker'
          }catch(err){
            currentBuild.result = "FAILURE"
            error("Невозможно выполниь клонированние из репозитория git")
          }
        }
      }
    }
    stage("Сборка образа docker"){
      steps{
        script{
          VERSION=readFile('/tmp/build').trim()
          VERSION="${VERSION}_${BUILD_NUMBER}"
          OTHER_VERSION=readFile('/tmp/build.other').trim()
          try{
            sh('''#!/bin/bash
            echo "========== Copy rpms =========="
            if [ ! -d ${WORKSPACE}/rpms ]; then
            cp -r /tmp/rpms ${WORKSPACE}
            fi''')
            echo "========== Build docker image =========="
            sh "docker build -t roschat-server:${VERSION} ."
          }catch(err){
            currentBuild.result = "FAILURE"
            error("Не удалось собрать образ docker")
          }
        }
      }
    }
    stage("Остановка старого контейнера"){
      steps{
        script{
          try{
            echo "========== Stop docker container =========="
            def exists_old_docker=fileExists '/tmp/build.other'
            if(exists_old_docker){
              sh('''#!/bin/bash
                if docker ps | grep roschat-server; then
                  docker container stop roschat-server_$(cat /tmp/build.other)
                fi''')
            }
          }catch(err){
            currentBuild.result = "FAILURE"
            error("Не удалось остановить старый контейнер")
          }
        }
      }
    }
    stage("Запуск нового контейнер"){
      steps{
        script{
          try{
            echo "========== Start docker container =========="
            sh('''#!/bin/bash
            docker run -d --name=roschat-server_$(cat /tmp/build)_${BUILD_NUMBER} \
              --mount type=bind,source=/sys/fs/cgroup,target=/sys/fs/cgroup \
              --mount type=tmpfs,destination=/run \
              --mount type=tmpfs,destination=/run/lock \
              -v /var/run/docker.sock:/var/run/docker.sock \
              -p 8080:8080 -p 80:80 -p 8081:8081 \
              -p 443:443 -p 5060:5060/udp -p 3478:3478 \
              -p 1110:1110 -p 2223:2223 -p 2222:22 \
              -p 49000-49150:49000-49150/udp \
              -p 49152-49182:49152-49182 \
              -p 161:161/udp roschat-server:$(cat /tmp/build)_${BUILD_NUMBER}''')
          }catch(e){
            resultBuild=false
          }
        }
      }
    }
    stage("Запуск установки ПО в новый контейнере"){
      steps{
        script{
          try{
            echo "========== Install soft on docker container =========="
            sh "docker container exec roschat-server_${VERSION} /tmp/start_ansible_playbook.sh"
          }catch(e){
            resultBuild=false
          }
        }
      }
    }
    stage("Проверка успешности сборки и запуска нового контейнера"){
      steps{
        script{
            if(!resultBuild){
              echo '========== Faild build docker image and start container =========='
              def exists_docker=sh script: "docker ps -a | grep roschat-server_${VERSION}", returnStdout: true
              if(exists_docker){
                sh "docker stop roschat-server_${VERSION}"
                sh "docker rm roschat-server_${VERSION}"
                sh "docker rmi roschat-server:${VERSION}"
              }

              echo "========== Start old container =========="
              sh "docker start roschat-server_${OTHER_VERSION}"
              sh "docker container exec roschat-server_${OTHER_VERSION} /tmp/start_services.sh"
            }else{
              echo "========== Remove old container =========="
              sh "docker rm roschat-server_${OTHER_VERSION}"
            }
        }
      }
    }
    stage('Удаление метки для сборки образа docker'){
      steps{
        script{
          if(resultBuild){
            echo "========== Remove mark for build =========="
            sh('''#!/bin/bash
            rm -f /tmp/build''')
            sh "echo ${VERSION} > /tmp/build.other"
          }
        }
      }
    }
  }
  post{
    always{
      script{
        if(!resultBuild){
          STATUS="Провал"
        }
        if(currentBuild.result != "SUCCESS"){
          STATUS="Провал"
        }
      }
      emailext body: "Собираемая версия сервера - roschat-server:${VERSION} \n Результат сборки - ${STATUS}", subject: 'Сборка Росчат сервера', to: 'bezpalko'
    }
    success{
      script{
        build(job: "roschat-server-testing",
          parameters:
          [string(name: 'VER', value: "${VERSION}")])
      }
    }
  }
}
