#!groovy

def resultBuild = true
properties([disableConcurrentBuilds()])

node('docker_centos'){

    stage("Очищаем сборочную директорию"){
        deleteDir();
    }

    stage("Клонирование GIT"){
        echo "========== Cloning GIT =========="
        git 'ssh://bezpalko_p@10.10.199.35/opt/git/firelink/roschat-server_docker'
    }

    stage("Собираем образ docker"){
      try{
        sh('''#!/bin/bash
        echo "========== Copy rpms =========="
        if [ ! -d ${WORKSPACE}/rpms ]; then
        cp -r /tmp/rpms ${WORKSPACE}
        fi
        echo "========== Build docker image =========="
        docker build -t roschat-server:$(cat /tmp/build) .''')
      }catch(e){
        resultBuild=false
      }
    }

    stage("Останавливаем старый контейнер"){
      if(resultBuild){
        sh('''#!/bin/bash
        echo "========== Stop docker container =========="
        if test -f /tmp/build.other; then
          if docker ps | grep roschat-server; then
          docker container stop roschat-server_$(cat /tmp/build.other)
          fi
        fi''')
      }else{
        return
      }
    }

    stage("Запускаем новый контейнер"){
      if(resultBuild){
        try{
          sh('''#!/bin/bash
          echo "========== Start docker container =========="
          docker run -d --name=roschat-server_$(cat /tmp/build) \
            --mount type=bind,source=/sys/fs/cgroup,target=/sys/fs/cgroup \
            --mount type=tmpfs,destination=/run \
            --mount type=tmpfs,destination=/run/lock \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -p 8080:8080 -p 80:80 -p 8081:8081 -p 443:443 \
            -p 5060:5060/udp -p 3478:3478 \
            -p 1110:1110 -p 2223:2223 -p 2222:22 \
            -p 49000-49150:49000-49150/udp \
            -p 49152-49182:49152-49182 roschat-server:$(cat /tmp/build)''')
        }catch(e){
          resultBuild=false
        }
      }
    }

    stage("Запускаю установку ПО в контейнере"){
      if(resultBuild){
        try{
          sh('''#!/bin/bash
          echo "========== Install soft on docker container =========="
          docker container exec roschat-server_$(cat /tmp/build) /tmp/start_ansible_playbook.sh''')
        }catch(e){
          resultBuild=false
        }
      }
    }

    stage("Проверяем успешность сборки и запуска контейнера"){
      if(!resultBuild){
        sh('''#!/bin/bash
        echo "========== Faild build docker image and start container =========="
        if docker ps | grep roschat-server_$(cat /tmp/build); then
          docker stop roschat-server_$(cat /tmp/build)
          docker rm roschat-server_$(cat /tmp/build)
          docker rmi roschat-server:$(cat /tmp/build)
        fi

        echo "========== Start old container =========="
        docker start roschat-server_$(cat /tmp/build.other)
        docker container exec roschat-server_$(cat /tmp/build.other) /tmp/start_services.sh''')
      }else{
        sh('''#!/bin/bash
        echo "========== Remove old container =========="
        docker rm roschat-server_$(cat /tmp/build.other)''')
      }
    }

    stage('Удаляем метку для сборки'){
      if(resultBuild){
        sh('''#!/bin/bash
        echo "========== Remove mark for build =========="
        mv -f /tmp/build /tmp/build.other''')
      }
    }

    if(resultBuild) {
        currentBuild.result = "SUCCESS"
    } else {
        currentBuild.result = "FAILURE"
    }
}
