#!groovy

String VERSION
String VERSION_OLD
properties([disableConcurrentBuilds()])

def is_critical_result_shell_build(command,text){
    if(currentBuild.result == 'SUCCESS'){
        try{
            sh command
        }catch(err){
            currentBuild.result = 'FAILURE'
            emailext body: "Server version - roschat-server:${VERSION} \n Result build - ${currentBuild.result}", subject: 'Build Roschat server', to: 'bezpalko', from: 'jenkins@ros.chat'
			error(text)
			return;
        }
    }
}

def is_result_shell_build(command,text){
    if(currentBuild.result == 'SUCCESS'){
        try{
            sh command
        }catch(err){
            echo text
            currentBuild.result = 'FAILURE'
        }
    }
}

def is_result_shell_after_build(command,text){
	if(currentBuild.result == 'SUCCESS'){
    	try{
    	  sh command
    	}catch(err){
    	    echo text
    	}
	}
}

pipeline{
  agent{
    label 'docker_centos'
  }
  stages{
    stage("Cleaning the assembly directory"){
      steps{
        deleteDir();
      }
    }
    stage("Cloning from a git repository"){
      steps{
        echo "========== Cloning GIT =========="
        script{
          try{
            git 'ssh://bezpalko_p@10.10.199.35/opt/git/firelink/roschat-server_docker'
          }catch(err){
            currentBuild.result = "FAILURE"
            error("Error copying from git repository")
			return;
          }
		  currentBuild.result = "SUCCESS"
        }
      }
    }
    stage("Stopping old container"){
      steps{
        script{
          echo "========== Stop and remove old docker container =========="
          is_critical_result_shell_build("docker-compose stop && docker-compose rm -f","Can't stop old docker container")
        }
      }
    }
    stage("Build docker image and run docker container"){
      steps{
        script{
			VERSION=readFile('/opt/build').trim()
			VERSION_OLD=readFile('/opt/build.old').trim()
			VERSION="${VERSION}_${BUILD_NUMBER}"
			echo "========== TAG for new docker =========="
			is_critical_result_shell_build("echo TAG=${VERSION} > ${WORKSPACE}/.env","Can't write a tag to a ${WORKSPACE}/.env")
			echo "========== Copy license =========="
			is_critical_result_shell_build("test ! -d ${WORKSPACE}/license && cp -r /opt/license ${WORKSPACE}","Can't copy license to a ${WORKSPACE}")
			echo "========== Copy rpms =========="
			is_critical_result_shell_build("test ! -d ${WORKSPACE}/rpms && cp -r /opt/rpms ${WORKSPACE}","Can't copy rpms to a ${WORKSPACE}")
			echo "========== Build docker image and run container =========="
			is_critical_result_shell_build("docker-compose up -d","The result of the assembly and launch of the container - failed")
        }
      }
    }
    stage("Software installation on the server"){
      steps{
        script{
			echo "========== Software installing on docker container =========="
			is_critical_result_shell_build("docker-compose exec -T -u 0 roschat-server /opt/start_ansible_playbook.sh","Error installing software on server")
        }
      }
    }
    stage("Commit docker image after build"){
      steps{
        script{
		    is_result_shell_after_build("docker rmi roschat-server:latest","Can't to delete docker image of latest version")
		    is_result_shell_after_build("docker rmi roschat-server:${VERSION_OLD}","Can't to delete remove docker of old version")
		    is_result_shell_after_build("docker commit ${VERSION} roschat-server","Can't commit latest version docker image")
        }
      }
    }
    stage('Pushing docker image to the docker registry'){
      steps{
        script{
			echo "========== Save old tag =========="
			is_result_shell_after_build("echo ${VERSION} > /opt/build.old","Can't save mark old image tag`")
			echo "========== Push build docker to docker hub =========="
			is_result_shell_after_build("docker login -u admin -p Y@rd87846259 10.10.199.217:8123","Can't login docker registry")
			is_result_shell_after_build("docker tag roschat-server:${VERSION} 10.10.199.217:8123/roschat-server:${VERSION}","Can't create tag docker image for docker registry")
			is_result_shell_after_build("docker push 10.10.199.217:8123/roschat-server:${VERSION}","Can't push docker image to docker registry")
			is_result_shell_after_build("docker rmi 10.10.199.217:8123/roschat-server:${VERSION}","Can't to delete tag for docker registry")
			is_result_shell_after_build("docker tag roschat-server:latest 10.10.199.217:8123/roschat-server:latest","Can't latest tag docker image for docker registry")
			is_result_shell_after_build("docker push 10.10.199.217:8123/roschat-server:latest","Can't push latest docker image to docker registry")
			is_result_shell_after_build("docker rmi 10.10.199.217:8123/roschat-server:latest","Can't to delete tag latest for docker registry")
        }
      }
    }
    stage('Sending report to email'){
        steps{
            script{
                emailext body: "Server version - roschat-server:${VERSION} \n Result build - ${currentBuild.result}", subject: 'Build Roschat server', to: 'bezpalko', from: 'jenkins@ros.chat'
            }
        }
    }
	stage('Start testing'){
	  steps{
	    script{
		  if(currentBuild.result == "SUCCESS"){
			try{
			  sleep 60
              if("${VERSION}".contains('roschat-sip')){}
			  else if("${VERSION}".contains('roschat-db')){
                  build(job: "roschat-db-testing", parameters: [string(name: 'VER', value: "${VERSION}")])
              }else if("${VERSION}".contains('roschat-snmp')){
                  build(job: "roschat-snmp-testing", parameters: [string(name: 'VER', value: "${VERSION}")])
              }else if("${VERSION}".contains('roschat-server')){
                  build(job: "roschat-server-testing", parameters: [string(name: 'VER', value: "${VERSION}")])
              }else if("${VERSION}".contains('roschat-web-client')){
                  build(job: "roschat-web-client-testing", parameters: [string(name: 'VER', value: "${VERSION}")])
              }else{
                  build(job: "roschat-ms-testing", parameters: [string(name: 'VER', value: "${VERSION}")])
              }
			}catch(err){
			  echo "roschat-server:${VERSION} testing - FAILED"
			}
		  }
		}
	  }
	}
  }
  post{
    always{
      script{
        if(currentBuild.result != "SUCCESS"){
	      Boolean DOCKER = sh(
			script: "docker ps -a | grep ${VERSION}",
			returnStatus: true) == 0
		  if(DOCKER){
			sh "docker-compose down && docker rmi roschat-server:${VERSION}"
		  }

		  echo "========== Start old container =========="
		  try{
			sh "docker ps | grep latest"
		  }catch(err){
			sh "echo TAG=latest > ${workspace}/.env"
			sh "docker-compose up -d && docker-compose exec -T -u 0 roschat-server /opt/start_services.sh"
		  }
        }
      }
    }
  }
}
